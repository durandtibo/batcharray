{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p><code>batcharray</code> is lightweight library built on top of NumPy to manipulate nested data structure with NumPy arrays. This library provides functions for arrays where the first dimension is the batch dimension. It also provides functions for arrays representing a batch of sequences where the first dimension is the batch dimension and the second dimension is the sequence dimension.</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>batcharray</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>batcharray</code> to a new version will possibly break any code that was using the old version of <code>batcharray</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>batcharray</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install batcharray\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>batcharray</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'batcharray[all]'\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>batcharray</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/batcharray.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate batcharray\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>batcharray</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/array/","title":"Array","text":""},{"location":"refs/array/#batcharray.array","title":"batcharray.array","text":"<p>Contain functions to manipulate arrays.</p>"},{"location":"refs/array/#batcharray.array.concatenate_along_batch","title":"batcharray.array.concatenate_along_batch","text":"<pre><code>concatenate_along_batch(\n    arrays: list[ndarray] | tuple[ndarray, ...]\n) -&gt; ndarray\n</code></pre> <p>Concatenate the given arrays in the batch axis.</p> <p>All arrays must either have the same data type and shape (except in the concatenating axis) or be empty.</p> Note <p>This function assumes the batch axis is the first     axis.</p> <p>Parameters:</p> Name Type Description Default <code>arrays</code> <code>list[ndarray] | tuple[ndarray, ...]</code> <p>The batches to concatenate.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The concatenated arrays along the batch axis.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from batcharray.array import concatenate_along_batch\n&gt;&gt;&gt; arrays = [\n...     np.array([[0, 1, 2], [4, 5, 6]]),\n...     np.array([[10, 11, 12], [13, 14, 15]]),\n... ]\n&gt;&gt;&gt; out = concatenate_along_batch(arrays)\n&gt;&gt;&gt; out\narray([[ 0,  1,  2],\n       [ 4,  5,  6],\n       [10, 11, 12],\n       [13, 14, 15]])\n</code></pre>"},{"location":"refs/array/#batcharray.array.concatenate_along_seq","title":"batcharray.array.concatenate_along_seq","text":"<pre><code>concatenate_along_seq(\n    arrays: list[ndarray] | tuple[ndarray, ...]\n) -&gt; ndarray\n</code></pre> <p>Concatenate the given arrays in the sequence axis.</p> <p>All arrays must either have the same data type and shape (except in the concatenating axis) or be empty.</p> Note <p>This function assumes the sequence axis is the second     axis.</p> <p>Parameters:</p> Name Type Description Default <code>arrays</code> <code>list[ndarray] | tuple[ndarray, ...]</code> <p>The batches to concatenate.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The concatenated arrays along the sequence axis.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from batcharray.array import concatenate_along_seq\n&gt;&gt;&gt; arrays = [\n...     np.array([[0, 1, 2], [4, 5, 6]]),\n...     np.array([[10, 11], [12, 13]]),\n... ]\n&gt;&gt;&gt; out = concatenate_along_seq(arrays)\n&gt;&gt;&gt; out\narray([[ 0,  1,  2, 10, 11],\n       [ 4,  5,  6, 12, 13]])\n</code></pre>"},{"location":"refs/array/#batcharray.array.take_along_batch","title":"batcharray.array.take_along_batch","text":"<pre><code>take_along_batch(\n    array: ndarray, indices: ndarray\n) -&gt; ndarray\n</code></pre> <p>Return a new array which indiceses the input array along the batch axis using the entries in <code>indices</code>.</p> Note <p>This function assumes the batch axis is the first axis.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>ndarray</code> <p>The input array.</p> required <code>indices</code> <code>ndarray</code> <p>The 1-D array containing the indices to take.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The indicesed array along the batch axis.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from batcharray.array import take_along_batch\n&gt;&gt;&gt; array = np.arange(10).reshape(5, 2)\n&gt;&gt;&gt; out = take_along_batch(array, np.array([2, 4]))\n&gt;&gt;&gt; out\narray([[4, 5],\n       [8, 9]])\n&gt;&gt;&gt; out = take_along_batch(array, np.array([4, 3, 2, 1, 0]))\n&gt;&gt;&gt; out\narray([[8, 9],\n       [6, 7],\n       [4, 5],\n       [2, 3],\n       [0, 1]])\n</code></pre>"},{"location":"refs/array/#batcharray.array.take_along_seq","title":"batcharray.array.take_along_seq","text":"<pre><code>take_along_seq(array: ndarray, indices: ndarray) -&gt; ndarray\n</code></pre> <p>Return a new array which indiceses the input array along the sequence axis using the entries in <code>indices</code>.</p> Note <p>This function assumes the sequence axis is the second axis.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>ndarray</code> <p>The input array.</p> required <code>indices</code> <code>ndarray</code> <p>The 1-D array containing the indices to take.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>The indicesed array along the sequence axis.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from batcharray.array import take_along_seq\n&gt;&gt;&gt; array = np.arange(10).reshape(2, 5)\n&gt;&gt;&gt; out = take_along_seq(array, np.array([2, 4]))\n&gt;&gt;&gt; out\narray([[2, 4],\n       [7, 9]])\n&gt;&gt;&gt; out = take_along_seq(array, np.array([4, 3, 2, 1, 0]))\n&gt;&gt;&gt; out\narray([[4, 3, 2, 1, 0],\n       [9, 8, 7, 6, 5]])\n</code></pre>"},{"location":"uguide/array/","title":"Tensor","text":""},{"location":"uguide/array/#batch","title":"Batch","text":"<p><code>batcharray</code> provides functions to manipulate arrays representing a batch of examples. The functions assume the arrays have the following shape: <code>batch_size, *</code> where <code>*</code> means any axes.</p>"},{"location":"uguide/array/#sequence","title":"Sequence","text":"<p><code>batcharray</code> provides functions to manipulate arrays representing a batch of sequences. The functions assume the arrays have the following shape: <code>batch_size, seq_len, *</code> where <code>*</code> means any axes.</p>"}]}